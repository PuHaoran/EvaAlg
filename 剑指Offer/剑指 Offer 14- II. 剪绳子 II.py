"""
剑指 Offer 14- II. 剪绳子 II
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。



示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
"""
""" 题解
尽可能剪成长度为3的子串，其次长度为2的子串。注意长度为4时，2*2>1*3，故需要当最后剩下子串为4时，需要特殊处理。
4=》2 2=》4
5=》3 2=》6
6=》3 3=》9
7=》3 2 2=》12
8=》3 3 2=》18

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36
"""


class Solution:
    def cuttingRope(self, n: int) -> int:
        if n == 2:
            return 1
        elif n == 3:
            return 2
        n3 = n // 3
        if n-n3*3 == 1:
            n3 -= 1
        n2 = (n-n3*3) // 2
        return (3**n3 * 2**n2) % 1000000007


solution = Solution()
print(solution.cuttingRope(4))

