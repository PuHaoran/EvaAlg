"""
给定一个大小为 n≤106 的数组。

有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。

你只能在窗口中看到 k 个数字。

每次滑动窗口向右移动一个位置。

以下是一个例子：

该数组为 [1 3 -1 -3 5 3 6 7]，k 为 3。

窗口位置	最小值	最大值
[1 3 -1] -3 5 3 6 7	-1	3
1 [3 -1 -3] 5 3 6 7	-3	3
1 3 [-1 -3 5] 3 6 7	-3	5
1 3 -1 [-3 5 3] 6 7	-3	5
1 3 -1 -3 [5 3 6] 7	3	6
1 3 -1 -3 5 [3 6 7]	3	7
你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。

输入格式
输入包含两行。

第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。

第二行有 n 个整数，代表数组的具体数值。

同行数据之间用空格隔开。

输出格式
输出包含两个。

第一行输出，从左至右，每个位置滑动窗口中的最小值。

第二行输出，从左至右，每个位置滑动窗口中的最大值。

输入样例：
8 3
1 3 -1 -3 5 3 6 7
输出样例：
-1 -3 -3 -3 3 3
3 3 5 5 6 7
"""
""" 题解
先思考暴力解法，暴力解法中需要维持一个k长度的窗口数组，然后每次加入一个新元素则遍历窗口数组，时间复杂度O(kn)。
实际窗口数组可以用队列来代替。例如，求窗口最小值时，1 3 2，当加入元素2的时候，窗口内的3就不会再被使用，故我们可以维持一个单调递增队列，每次取最左边元素即可。
"""


def main():
    n, k = map(int, input().split())
    arr = list(map(int, input().split()))

    p, q = -1, -1
    queue = [0] * 10 ** 6
    for i in range(len(arr)):
        # 去掉队列中超过窗口的元素
        if queue[p+1] < i-k+1:
            p += 1
        # 保持队列单调性
        while p != q and arr[i] <= arr[queue[q]]:
            q -= 1
        # 打印队列最左边的元素
        q += 1
        queue[q] = i
        if i >= k-1:
            print(arr[queue[p+1]], end=' ')
    print()

    p, q = -1, -1
    queue = [0] * 10 ** 6
    for i in range(len(arr)):
        # 去掉队列中超过窗口的元素
        if queue[p+1] < i-k+1:
            p += 1
        # 保持队列单调性
        while p != q and arr[i] >= arr[queue[q]]:
            q -= 1
        # 打印队列最左边的元素
        q += 1
        queue[q] = i
        if i >= k-1:
            print(arr[queue[p+1]], end=' ')


main()
